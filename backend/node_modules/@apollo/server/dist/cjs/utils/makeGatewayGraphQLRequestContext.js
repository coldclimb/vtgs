"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGatewayGraphQLRequestContext = void 0;
const node_fetch_1 = require("node-fetch");
function makeGatewayGraphQLRequestContext(as4RequestContext, server, internals) {
    const request = {};
    if ('query' in as4RequestContext.request) {
        request.query = as4RequestContext.request.query;
    }
    if ('operationName' in as4RequestContext.request) {
        request.operationName = as4RequestContext.request.operationName;
    }
    if ('variables' in as4RequestContext.request) {
        request.variables = as4RequestContext.request.variables;
    }
    if ('extensions' in as4RequestContext.request) {
        request.extensions = as4RequestContext.request.extensions;
    }
    if (as4RequestContext.request.http) {
        const as4http = as4RequestContext.request.http;
        const needQuestion = as4http.search !== '' && !as4http.search.startsWith('?');
        request.http = {
            method: as4http.method,
            url: `https://unknown-url.invalid/${needQuestion ? '?' : ''}${as4http.search}`,
            headers: new node_fetch_1.Headers(Object.fromEntries(as4http.headers)),
        };
    }
    const response = {
        http: {
            headers: new node_fetch_1.Headers(Object.fromEntries(as4RequestContext.response.http.headers)),
        },
    };
    if ('status' in as4RequestContext.response.http) {
        response.http.status = as4RequestContext.response.http.status;
    }
    return {
        request,
        response,
        logger: server.logger,
        schema: as4RequestContext.schema,
        schemaHash: 'schemaHash no longer exists in Apollo Server 4',
        context: as4RequestContext.contextValue,
        cache: server.cache,
        queryHash: as4RequestContext.queryHash,
        document: as4RequestContext.document,
        source: as4RequestContext.source,
        operationName: as4RequestContext.operationName,
        operation: as4RequestContext.operation,
        errors: as4RequestContext.errors,
        metrics: as4RequestContext.metrics,
        debug: internals.includeStacktraceInErrorResponses,
        overallCachePolicy: as4RequestContext.overallCachePolicy,
    };
}
exports.makeGatewayGraphQLRequestContext = makeGatewayGraphQLRequestContext;
//# sourceMappingURL=makeGatewayGraphQLRequestContext.js.map